<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="run service" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="118" y="50">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[PrefDomain = "RoboWebAPI"

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

        self.preferenceManager = None
        self.endpointURL = None
        self.client_token = None
        self.command_token = None
        self.return_token = None
        self.event_token =  None
        self.mqtt_host = None
        self.mqtt_port = None
        self.mqtt_username = None
        self.mqtt_password = None
        self.pingEndpointTask = None

    def onLoad(self):
        self.run = False
        self.pintEndpointTask = None

        self.modules = {}
        self.webhookHandlers = {}

        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), "../lib")
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        self.preferenceManager = ALProxy("ALPreferenceManager")
        self.endpointURL = self.preferenceManager.getValue(PrefDomain, "endpointURL")
        self.client_token =self.preferenceManager.getValue(PrefDomain, "client_token")
        self.command_token = self.preferenceManager.getValue(PrefDomain, "command_token")
        self.return_token = self.preferenceManager.getValue(PrefDomain, "return_token")
        self.event_token =  self.preferenceManager.getValue(PrefDomain, "event_token")
        self.mqtt_host = self.preferenceManager.getValue(PrefDomain, "mqtt_host")
        self.mqtt_port = self.preferenceManager.getValue(PrefDomain, "mqtt_port")
        self.mqtt_username = self.preferenceManager.getValue(PrefDomain, "mqtt_username")
        self.mqtt_password = self.preferenceManager.getValue(PrefDomain, "mqtt_password")

    def onUnload(self):
        self._disconnectEndpoint()

        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None


    def onInput_onStart(self):
        import qi

        if self.endpointURL == None:
            self.onFail("")
        else:
            qi.async(self._mqttThread)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def _mqttThread(self):
        import requests
        import json
        import paho.mqtt.client as mqtt

        self.run = True

        self.mqttc = mqtt.Client(client_id='', clean_session=True, protocol=mqtt.MQTTv311)

        #self.logger.info(self.mqtt_username)
        #self.logger.info(self.mqtt_password)
        #self.logger.info(self.mqtt_host)
        #self.logger.info(self.mqtt_port)

        self.mqttc.username_pw_set(self.mqtt_username, self.mqtt_password)
        self.mqttc.on_message = self._handleMessage
        self.mqttc.connect(self.mqtt_host, self.mqtt_port, keepalive=60)
        self.mqttc.subscribe(self.command_token)

        self.pingEndpointTask = qi.PeriodicTask()
        self.pingEndpointTask.setCallback(self._pingEndpoint)
        self.pingEndpointTask.setUsPeriod(30000000)
        self.pingEndpointTask.start(True)

        self.logger.info("(RoboWebAPI client) ****** Running service ******")
        self.logger.info("(RoboWebAPI client) ****** client_token: " + self.client_token)

        self.onReady()

        self.mqttc.loop_forever()
        self.logger.info("(RoboWebAPI client) ending..")

    def _disconnectEndpoint(self):
        if self.pingEndpointTask:
            self.pingEndpointTask.stop()

        self.pingEndpointTask = None

        for key in self.webhookHandlers:
            self.webhookHandlers[key].dropAll()

        self.webhookHandlers = {}

        if self.run == True and self.mqttc != None:
            self.logger.info("(RoboWebAPI client) mqtt client unsubscribing..")
            self.mqttc.unsubscribe(self.command_token)
            self.logger.info("(RoboWebAPI client) mqtt client disconnecting..")
            self.mqttc.disconnect()

        self.run = False
        self.mqttc = None

    def _pingEndpoint(self) :
        if self.mqttc and self.event_token:
            self.logger.info("(RoboWebAPI client) ping endpoint..")
            self.mqttc.publish(self.event_token, '{"client_token":self.client_token, "message": "ping"}')

    def _handleMessage(self, mqttc, obj, msg):
        import json
        import qi

        r = objUnicodeToUtf8(json.loads(str(msg.payload)))
        qi.async(self._handleMessageThread, r)

        return

    def _handleMessageThread(self, r):
        import qi

        self.logger.info(r)
        if "command" in r:
            command = r["command"]
            if command == "call":
                module = r["module"]
                method = r["method"]
                async = r["async"]
                args = r["args"]
                module_token = r["module_token"]
                method_token = r["method_token"]

                try:
                    if module_token:
                        module_toke_key = str(module_token) + module
                        if module_toke_key in self.modules:
                            self.logger.info("reusing module: %s", str(module_toke_key) )
                            proxy = self.modules[module_toke_key]
                        else:
                            self.logger.info("new reuse module: %s", str(module_toke_key) )
                            proxy = ALProxy(module)
                            self.modules[module_toke_key] = proxy
                    else:
                            proxy = ALProxy(module)

                    if r["async"]:
                        self.mqttc.publish(self.return_token, '{"method_token":%s,"result":null}' % (str(method_token)))

                    result = None
                    if len(args) == 0:
                        result = proxy.call(method)
                    elif len(args) == 1:
                        result = proxy.call(method,args[0])
                    elif len(args) == 2:
                        result = proxy.call(method,args[0], args[1])
                    elif len(args) == 3:
                        result = proxy.call(method,args[0], args[1], args[2])
                    elif len(args) == 4:
                        result = proxy.call(method,args[0], args[1], args[2], args[3])
                    elif len(args) == 5:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4])
                    elif len(args) == 6:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5])
                    elif len(args) == 7:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6])
                    elif len(args) == 8:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7])
                    elif len(args) == 9:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8])
                    elif len(args) == 10:
                        result = proxy.call(method,args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9])

                    if not async:
                        if type(result) == str:
                            self.mqttc.publish(self.return_token, '{"method_token":%s,"result":"%s"}' % (str(method_token), result))
                        elif result == None:
                            self.mqttc.publish(self.return_token, '{"method_token":%s,"result":null}' % (str(method_token)))
                        else:
                            self.mqttc.publish(self.return_token, '{"method_token":%s,"result":%s}' % (str(method_token), result))

                except Exception as inst:
                    if not async:
                        self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token),"result":None, "exception":str(inst)}))

            elif command == "addWebhook":
                key = r["key"]
                url = r["url"]
                method_token = r["method_token"]
                if key in self.webhookHandlers:
                    handler = self.webhookHandlers[key]
                else:
                    handler = self.WebhookHandlerClass(self.session(), self.logger, self.client_token, key)
                    self.webhookHandlers[key] = handler

                result = handler.addUrl(url)
                self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token), "result":result}))

            elif command == "dropWebhook":
                key = r["key"]
                url = r["url"]
                method_token = r["method_token"]

                result = None

                if key in self.webhookHandlers:
                    result = self.webhookHandlers[key].dropUrl(url)

                self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token), "result":result}))

            elif command == "exit":
                method_token = r["method_token"]
                self.mqttc.publish(self.return_token, json.dumps({"method_token":str(method_token), "result":None}))
                self.onInput_onStop()

    class WebhookHandlerClass:
        def __init__(self, session, logger, client_token, key):
            self.urls = []
            self.logger = logger
            self.client_token = client_token
            self.key = key
            self.memory = session.service("ALMemory")
            self.subscriber = self.memory.subscriber(key)
            self.linkId = self.subscriber.signal.connect(self._callback)

        def _callback(self, value):
            import requests
            import datetime

            count = 0
            fail = 0
            for url in self.urls:
                self.logger.info("call.." + url)
                result = {
                    "timestamp":datetime.datetime.now().isoformat(),
                    "client_token":self.client_token,
                    "key": self.key,
                    "value" : value
                    }

                self.logger.info("#####")
                self.logger.info(result)
                try:
                    count = count + 1
                    requests.post(url, json=result)
                except Exception as inst:
                    self.logger.info(inst)
                    fail = fail + 1
            self.logger.info(count)

        def addUrl(self, url):
            self.logger.info("WebhookHandlerClass add url")

            if url not in self.urls:
                self.urls.append(url)

            return self.urls


        def dropUrl(self, url):
            self.logger.info("WebhookHandlerClass remove url..")

            self.logger.info("before...")
            for a in self.urls:
                self.logger.info(a)

            if url in self.urls:
                self.urls.remove(url)

            self.logger.info("after...")
            for a in self.urls:
                self.logger.info(a)

            if len(self.urls) == 0:
                self.dropAll()

            return self.urls


        def dropAll(self):
            self.logger.info("WebhookHandlerClass drop All")
            self.urls = []
            try:
                self.subscriber.signal.disconnect(self.linkId)
            except:
                pass

def objUnicodeToUtf8(o):
    r = o
    if type(o) == dict:
        r = {}
        for k in o:
            v = o[k]
            if type(k) == unicode:
                k = k.encode("utf-8")
            r[k] = objUnicodeToUtf8(v)

    elif type(o) == list:
        r = []
        for v in o:
            r.append(objUnicodeToUtf8(v))
    elif type(o) == unicode:
        r = o.encode("utf-8")

    return r]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="onFail" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Parameter name="endpointURL" inherits_from_parent="0" content_type="3" value="http://192.168.11.2:8081" default_value="" custom_choice="0" tooltip="" id="7" />
                        </Box>
                        <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="262" y="116">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Success to connect to endpoint server")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[Success to connect to endpoint server]]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                        </Box>
                        <Box name="Log" id="3" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="516" y="101">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="(RoboWebAPI client)" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
